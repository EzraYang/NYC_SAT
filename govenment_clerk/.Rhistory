table(train1$accep, df1LOGpredTr>0.7399651)
df1LOGpredTr = predict(df1LOG, newdata=train1, type='response')
summary(df1LOGpredTr)
df1LOGpredTr = predict(df1LOG, type='response')
summary(df1LOGpredTr)
getwd()
df1 = read.csv('df1.csv')
str(df1)
library(caTools)
set.seed(99)
spl = sample.split(df1$accep,
SplitRatio = 0.7)
train1 = subset(df1, spl==TRUE)
test1 = subset(df1, spl==FALSE)
dim(train1)
dim(test1)
# df1CART model
library(rpart)
library(rpart.plot)
df1CART = rpart(accep ~ exam + interview + score +
sus_village + town + county + city,
data=train1,
method='class',
minbucket=10)
prp(df1CART)
# df1CART accu on train
df1CARTpredTr = predict(df1CART, type='class')
table(train1$accep, df1CARTpredTr)
# df1CART accu on train
(255+856)/nrow(train1)
# baseline accu
table(train1$accep)
# baseline accu
1064 / nrow(train1)
# df1CART accu on test
df1CARTpredTe = predict(df1CART, newdata=test1, type='class')
table(test1$accep, df1CARTpredTe)
# df1CART accu on test
(83+379)/nrow(test1)    # just slightly better than baseline
# df1CART AUC value
library(ROCR)
# df1CART AUC value
df1CARTpredROC = prediction(as.numeric(df1CARTpredTe), as.numeric(test1$accep))
as.numeric(performance(df1CARTpredROC, "auc")@y.values)
# df1LOG model
df1LOG = glm(accep ~ exam + interview + score +
sus_village + town + county + city,
data = train1,
family = 'binomial')
summary(df1LOG)
df1LOGpredTr = predict(df1LOG, type='response')
summary(df1LOGpredTr)
sum(train1$accep) / nrow(train1)
quantile(df1LOGpredTr, 0.6592317)
table(train1$accep, df1LOGpredTr>0.7399651)
length(train1$accep)
length(df1LOGpredTr)
sum(test1$accep) / nrow(test1)
(449+441)/nrow(train1)
# df1LOG accu on train1
quantile(df1LOGpredTr, 0.6612803)
# df1LOG accu on train1
table(train1$accep, df1LOGpredTr>0.7386028)
# df1LOG accu on train1
(448+448)/nrow(train1)
# df1LOG accu on test1
df1LOGpredTe = predict(df1LOG, newdata=test1, type='response')
quantile(df1LOGpredTe, mean(test1$accep))
table(test1$accep, df1LOGpredTe>0.7357206)
(192+192)/nrow(test1)
# df1LOG AUC value
df1LOGpredROC = prediction(as.numeric(df1LOGpredTe), as.numeric(test1$accep))
as.numeric(performance(df1LOGpredROC, "auc")@y.values)
df2 = read.csv('df2.csv')
train2 = subset(df2, spl==TRUE)
test2 = subest(df2, spl==FALSE)
train2 = subset(df2, spl==TRUE)
test2 = subset(df2, spl==FALSE)
df2 = read.csv('df2.csv')
str(df2)
df2CART  = (accep ~ .-X,
df2CART  = (accep ~ .-X,
df2 = read.csv('df2.csv')
str(df2)
train2 = subset(df2, spl==TRUE)
test2 = subset(df2, spl==FALSE)
df2CART  = (accep ~ exam + interview + score +
sus_village + town + county + city +
gender + ethnic,
getwd()
df1 = read.csv('df1.csv')
str(df1)
library(caTools)
set.seed(99)
spl = sample.split(df1$accep,
SplitRatio = 0.7)
train1 = subset(df1, spl==TRUE)
test1 = subset(df1, spl==FALSE)
dim(train1)
dim(test1)
# df1CART model
library(rpart)
library(rpart.plot)
df1CART = rpart(accep ~ exam + interview + score +
sus_village + town + county + city,
data=train1,
method='class',
minbucket=10)
prp(df1CART)
# df1CART accu on train
df1CARTpredTr = predict(df1CART, type='class')
table(train1$accep, df1CARTpredTr)
# df1CART accu on train
(255+856)/nrow(train1)
# baseline accu
table(train1$accep)
# baseline accu
1064 / nrow(train1)
# df1CART accu on test
df1CARTpredTe = predict(df1CART, newdata=test1, type='class')
table(test1$accep, df1CARTpredTe)
# df1CART accu on test
(83+379)/nrow(test1)    # just slightly better than baseline
# df1CART AUC value
library(ROCR)
# df1CART AUC value
df1CARTpredROC = prediction(as.numeric(df1CARTpredTe), as.numeric(test1$accep))
as.numeric(performance(df1CARTpredROC, "auc")@y.values)
# df1LOG model
df1LOG = glm(accep ~ exam + interview + score +
sus_village + town + county + city,
data = train1,
family = 'binomial')
summary(df1LOG)
# df1LOG accu on train1
df1LOGpredTr = predict(df1LOG, type='response')
summary(df1LOGpredTr)
# df1LOG accu on train1
sum(train1$accep) / nrow(train1)
# df1LOG accu on train1
quantile(df1LOGpredTr, 0.6612803)
# df1LOG accu on train1
table(train1$accep, df1LOGpredTr>0.7386028)
# df1LOG accu on train1
(448+448)/nrow(train1)
# df1LOG accu on test1
df1LOGpredTe = predict(df1LOG, newdata=test1, type='response')
quantile(df1LOGpredTe, mean(test1$accep))
table(test1$accep, df1LOGpredTe>0.7357206)
(192+192)/nrow(test1)
# df1LOG AUC value
df1LOGpredROC = prediction(as.numeric(df1LOGpredTe), as.numeric(test1$accep))
as.numeric(performance(df1LOGpredROC, "auc")@y.values)
df2 = read.csv('df2.csv')
str(df2)
train2 = subset(df2, spl==TRUE)
test2 = subset(df2, spl==FALSE)
df2CART  = (accep ~ exam + interview + score +
sus_village + town + county + city +
gender + ethnic,
df2CART = rpart(accep ~ exam + interview + score +
sus_village + town + county + city +
gender + ethnic,
data=train2,
method='class',
minbucket=10)
prp(df2CART)
df2CART = rpart(accep ~ exam + interview + score +
sus_village + town + county + city +
gender + ethnic,
data=train2,
method='class',
minbucket=10)
prp(df2CART)
df2CARTpredTr = predict(df2CART, type='class')
table(train2$accep, df2CARTpredTr)
df2CARTpredTr = predict(df2CART, type='class')
table(train2$accep, df2CARTpredTr)
(195+947)/nrow(train2)
df2CARTpredTe = predict(df2CART, newdata=test2, type='class')
table(test2$accep, df2CARTpredTe)
(75+385)/nrow(test2)
# df1CART model
library(rpart)
library(rpart.plot)
df1CART = rpart(accep ~ exam  + score +
sus_village + town + county + city,
data=train1,
method='class',
minbucket=10)
prp(df1CART)
# df1CART accu on train
df1CARTpredTr = predict(df1CART, type='class')
table(train1$accep, df1CARTpredTr)
# df1CART accu on train
(139+972)/nrow(train1)
(139+972)/nrow(train1)
table(train1$accep)
1064 / nrow(train1)
# df1CART accu on test
df1CARTpredTe = predict(df1CART, newdata=test1, type='class')
table(test1$accep, df1CARTpredTe)
# df1CART accu on test
(64+401)/nrow(test1)    # just slightly better than baseline
# df1CART model
library(rpart)
library(rpart.plot)
df1CART = rpart(accep ~ exam  + score +
sus_village + town + county + city,
data=train1,
method='class',
minbucket=5)
prp(df1CART)
# df1CART accu on train
df1CARTpredTr = predict(df1CART, type='class')
table(train1$accep, df1CARTpredTr)
# df1CART accu on train
(164+947)/nrow(train1)
(164+947)/nrow(train1)
# df1CART model
library(rpart)
library(rpart.plot)
set.seed(99)
df1CART = rpart(accep ~ exam  + score +
sus_village + town + county + city,
data=train1,
method='class',
minbucket=5)
prp(df1CART)
# df1CART accu on train
df1CARTpredTr = predict(df1CART, type='class')
table(train1$accep, df1CARTpredTr)
# df1CART accu on train
(164+947)/nrow(train1)
# baseline accu
table(train1$accep)
# baseline accu
1064 / nrow(train1)
# df1CART accu on test
df1CARTpredTe = predict(df1CART, newdata=test1, type='class')
table(test1$accep, df1CARTpredTe)
# df1CART accu on test
(72+390)/nrow(test1)    # just slightly better than baseline
# df1CART AUC value
df1CARTpredROC = prediction(as.numeric(df1CARTpredTe), as.numeric(test1$accep))
as.numeric(performance(df1CARTpredROC, "auc")@y.values)
# df1CART model
library(rpart)
library(rpart.plot)
set.seed(99)
df1CART = rpart(accep ~ exam +
sus_village + town + county + city,
data=train1,
method='class',
minbucket=5)
prp(df1CART)
# df1CART model
library(rpart)
library(rpart.plot)
set.seed(99)
df1CART = rpart(accep ~ exam +
sus_village + town + county + city,
data=train1,
method='class',
minbucket=1)
prp(df1CART)
# df1CART accu on train
df1CARTpredTr = predict(df1CART, type='class')
table(train1$accep, df1CARTpredTr)
# df1CART accu on train
0
# df1CART accu on test
df1CARTpredTe = predict(df1CART, newdata=test1, type='class')
table(test1$accep, df1CARTpredTe)
# df1CART accu is just baseline accu
1064 / nrow(train1)
library(ROCR)
# df1CART AUC value
df1CARTpredROC = prediction(as.numeric(df1CARTpredTe), as.numeric(test1$accep))
as.numeric(performance(df1CARTpredROC, "auc")@y.values)
# df1LOG model
df1LOG = glm(accep ~ exam  +
sus_village + town + county + city,
data = train1,
family = 'binomial')
summary(df1LOG)
# df1LOG accu on train1
df1LOGpredTr = predict(df1LOG, type='response')
summary(df1LOGpredTr)
# df1LOG accu on train1
sum(train1$accep) / nrow(train1)
# df1LOG accu on train1
quantile(df1LOGpredTr, 0.6612803)
# df1LOG accu on train1
table(train1$accep, df1LOGpredTr>0.7015753)
# df1LOG accu on train1
(417+423)/nrow(train1)
# df1LOG accu on test1
df1LOGpredTe = predict(df1LOG, newdata=test1, type='response')
quantile(df1LOGpredTe, mean(test1$accep))
table(test1$accep, df1LOGpredTe>0.7040609)
(184+185)/nrow(test1)
# df1LOG AUC value
df1LOGpredROC = prediction(as.numeric(df1LOGpredTe), as.numeric(test1$accep))
as.numeric(performance(df1LOGpredROC, "auc")@y.values)
df2CART = rpart(accep ~ exam +
sus_village + town + county + city +
gender + ethnic,
data=train2,
method='class',
minbucket=10)
prp(df2CART)
df2CART = rpart(accep ~ exam +
sus_village + town + county + city +
gender + ethnic,
data=train2,
method='class',
minbucket=1)
prp(df2CART)
df3 = read.csv('df3.csv')
df3 = read.csv('df3.csv')
str(df3)
train3 = subset(df3, spl==TRUE)
test3 = subset(df3, spl==FALSE)
df3CART = rpart(accep ~ exam +
sus_village + town + county + city +
gender + ethnic +
edu + degree,
data=train3,
method='class',
minbucket=1)
prp(df3CART)
# df2LOG model
df2LOG = glm(accep ~ exam  +
sus_village + town + county + city,
data = train1,
family = 'binomial')
summary(df2LOG)
# df2LOG model
df2LOG = glm(accep ~ exam  +
sus_village + town + county + city +
gender + ethnic,
data = train1,
family = 'binomial')
df2 = read.csv('df2.csv')
str(df2)
train2 = subset(df2, spl==TRUE)
test2 = subset(df2, spl==FALSE)
df2CART = rpart(accep ~ exam +
sus_village + town + county + city +
gender + ethnic,
data=train2,
method='class',
minbucket=1)
prp(df2CART)
# df2LOG model
df2LOG = glm(accep ~ exam +
sus_village + town + county + city +
gender + ethnic,
data = train1,
family = 'binomial')
# df2LOG model
df2LOG = glm(accep ~ exam +
sus_village + town + county + city +
gender + ethnic,
data = train2,
family = 'binomial')
summary(df2LOG)
# df1LOG accu on train1
df2LOGpredTr = predict(df2LOG, type='response')
table(test2$accep, quantile(df2LOGpredTr, mean(train2$accep)))
# df1LOG accu on train1
df2LOGpredTr = predict(df2LOG, type='response')
table(train2$accep, quantile(df2LOGpredTr, mean(train2$accep)))
# df1LOG accu on train1
df2LOGpredTr = predict(df2LOG, type='response')
table(train2$accep, df2LOGpredTr>quantile(df2LOGpredTr, mean(train2$accep)))
length(train2$accep)
length(df2LOGpredTr>quantile(df2LOGpredTr, mean(train2$accep)))
df2 = read.csv('df2.csv')
str(df2)
train2 = subset(df2, spl==TRUE)
test2 = subset(df2, spl==FALSE)
df2CART = rpart(accep ~ exam +
sus_village + town + county + city +
gender + ethnic,
data=train2,
method='class',
minbucket=1)
prp(df2CART)
# df2LOG model
df2LOG = glm(accep ~ exam +
sus_village + town + county + city +
gender + ethnic,
data = train2,
family = 'binomial')
summary(df2LOG)
# df1LOG accu on train1
df2LOGpredTr = predict(df2LOG, type='response')
table(train2$accep, df2LOGpredTr>quantile(df2LOGpredTr, mean(train2$accep)))
# df2LOG accu on test2
df2LOGpredTe = predict(df2LOG, newdata=test2, type='response')
df2LOGpredTe = predict(df2LOG, newdata=test2, type='response')
getwd()
df1 = read.csv('df1.csv')
str(df1)
library(caTools)
set.seed(99)
spl = sample.split(df1$accep,
SplitRatio = 0.7)
train1 = subset(df1, spl==TRUE)
test1 = subset(df1, spl==FALSE)
dim(train1)
dim(test1)
# df1CART model
library(rpart)
library(rpart.plot)
set.seed(99)
df1CART = rpart(accep ~ exam +
sus_village + town + county + city,
data=train1,
method='class',
minbucket=1)
prp(df1CART)
# df1CART accu on train
df1CARTpredTr = predict(df1CART, type='class')
table(train1$accep, df1CARTpredTr)
# df1CART accu is just baseline accu
1064 / nrow(train1)
# baseline accu
table(train1$accep)
# baseline accu
1064 / nrow(train1)
# df1CART AUC value
library(ROCR)
# df1CART AUC value
df1CARTpredROC = prediction(as.numeric(df1CARTpredTe), as.numeric(test1$accep))
as.numeric(performance(df1CARTpredROC, "auc")@y.values)
# df1LOG model
df1LOG = glm(accep ~ exam  +
sus_village + town + county + city,
data = train1,
family = 'binomial')
summary(df1LOG)
# df1LOG accu on train1
df1LOGpredTr = predict(df1LOG, type='response')
summary(df1LOGpredTr)
# df1LOG accu on train1
sum(train1$accep) / nrow(train1)
# df1LOG accu on train1
quantile(df1LOGpredTr, 0.6612803)
# df1LOG accu on train1
table(train1$accep, df1LOGpredTr>0.7015753)
# df1LOG accu on train1
(417+423)/nrow(train1)
# df1LOG accu on test1
df1LOGpredTe = predict(df1LOG, newdata=test1, type='response')
quantile(df1LOGpredTe, mean(test1$accep))
table(test1$accep, df1LOGpredTe>0.7040609)
(184+185)/nrow(test1)
# df1LOG AUC value
df1LOGpredROC = prediction(as.numeric(df1LOGpredTe), as.numeric(test1$accep))
as.numeric(performance(df1LOGpredROC, "auc")@y.values)
df2 = read.csv('df2.csv')
str(df2)
train2 = subset(df2, spl==TRUE)
test2 = subset(df2, spl==FALSE)
df2CART = rpart(accep ~ exam +
sus_village + town + county + city +
gender + ethnic,
data=train2,
method='class',
minbucket=1)
prp(df2CART)
# df2LOG model
df2LOG = glm(accep ~ exam +
sus_village + town + county + city +
gender + ethnic,
data = train2,
family = 'binomial')
summary(df2LOG)
# df1LOG accu on train1
df2LOGpredTr = predict(df2LOG, type='response')
table(train2$accep, df2LOGpredTr>quantile(df2LOGpredTr, mean(train2$accep)))
# df2LOG accu on test2
df2LOGpredTe = predict(df2LOG, newdata=test2, type='response')
# df2LOG accu on train2
(425+423)/nrow(train2)
df3 = read.csv('df3.csv')
str(df3)
train3 = subset(df3, spl==TRUE)
test3 = subset(df3, spl==FALSE)
df3CART = rpart(accep ~ exam +
sus_village + town + county + city +
gender + ethnic +
edu + degree,
data=train3,
method='class',
minbucket=1)
prp(df3CART)
# df3LOG model
df3LOG = glm(accep ~ exam +
sus_village + town + county + city +
gender + ethnic +
edu + degree,
data = train3,
family = 'binomial')
summary(df3LOG)
# df3LOG accu on train3
df3LOGpredTr = predict(df3LOG, type='response')
table(train3$accep, df3LOGpredTr>quantile(df3LOGpredTr, mean(train3$accep)))
(427+427)/nrow(train3)
